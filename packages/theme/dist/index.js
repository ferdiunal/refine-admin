"use strict";var e,r=Object.create,a=Object.defineProperty,t=Object.getOwnPropertyDescriptor,s=Object.getOwnPropertyNames,i=Object.getPrototypeOf,l=Object.prototype.hasOwnProperty,n=(e,r)=>a(e,"name",{value:r,configurable:!0}),o=(e,r,i,n)=>{if(r&&"object"==typeof r||"function"==typeof r)for(let o of s(r))!l.call(e,o)&&o!==i&&a(e,o,{get:()=>r[o],enumerable:!(n=t(r,o))||n.enumerable});return e},d=(e,t,s)=>(s=null!=e?r(i(e)):{},o(!t&&e&&e.__esModule?s:a(s,"default",{value:e,enumerable:!0}),e)),c={};((e,r)=>{for(var t in r)a(e,t,{get:r[t],enumerable:!0})})(c,{BaseLayout:()=>ws,Breadcrumbs:()=>ee,CloneButton:()=>k,Combobox:()=>Xa,ConfirmDialog:()=>et,CreateButton:()=>D,CreatePage:()=>ss,DefaultLayout:()=>Ls,DeleteActionModal:()=>ei,DeleteButton:()=>wt,DeleteContext:()=>ri,DeleteProvider:()=>ai,EditButton:()=>kt,EditPage:()=>os,ExportButton:()=>Tt,Field:()=>tt,Form:()=>nt,ImportButton:()=>At,Link:()=>J,ListButton:()=>Vt,ListPage:()=>ms,ModeToggle:()=>ut,PageHeader:()=>xt,RefreshButton:()=>Ut,SaveButton:()=>Xt,Select:()=>ht,ShowButton:()=>es,ShowPage:()=>js,Sidebar:()=>Nt,Table:()=>Ji,notificationProvider:()=>Ms,useNotificationProvider:()=>Os}),module.exports=(e=c,o(a({},"__esModule",{value:!0}),e));var u=require("@radix-ui/react-slot"),m=require("class-variance-authority"),x=d(require("react")),f=require("clsx"),p=require("tailwind-merge");function h(...e){return(0,p.twMerge)((0,f.clsx)(e))}n(h,"cn");var g=require("lucide-react"),j=d(require("react")),b=require("react/jsx-runtime"),v=j.default.forwardRef((({className:e,...r},a)=>(0,b.jsx)(g.RefreshCwIcon,{ref:a,className:h("h-4 w-4 animate-spin",e),...r}))),N=require("react/jsx-runtime"),y=(0,m.cva)("inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",{variants:{variant:{default:"bg-primary text-primary-foreground shadow hover:bg-primary/90",destructive:"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",outline:"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",secondary:"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",ghost:"hover:bg-accent hover:text-accent-foreground",link:"text-primary underline-offset-4 hover:underline"},size:{default:"h-9 px-4 py-2",sm:"h-8 rounded-md px-3 text-xs",lg:"h-10 rounded-md px-8",icon:"h-9 w-9"}},defaultVariants:{variant:"default",size:"default"}}),w=x.forwardRef((({className:e,variant:r,size:a,icon:t=null,loading:s=!1,asChild:i=!1,children:l,disabled:n,...o},d)=>{n=n||s;let c=x.useMemo((()=>x.isValidElement(t)?t:s?(0,N.jsx)(v,{className:"mr-2"}):null),[t,s]);return(0,N.jsx)(i?u.Slot:"button",{className:h(y({variant:r,size:a,className:e})),ref:d,disabled:n,...o,children:"icon"===a?s?(0,N.jsx)(v,{}):l:(0,N.jsxs)(N.Fragment,{children:[c,l]})})}));w.displayName="Button";var C=require("@refinedev/core"),q=require("lucide-react"),S=require("react/jsx-runtime"),k=n((({resource:e,recordItemId:r,hideText:a=!1,accessControl:t,meta:s,onClick:i,children:l,...n})=>{let{to:o,LinkComponent:d,label:c,disabled:u,hidden:m,title:x}=(0,C.useCloneButton)({id:r,resource:e,accessControl:t,meta:s});return m?null:(0,S.jsx)(d,{to:o,replace:!1,onClick:e=>{u?e.preventDefault():i&&(e.preventDefault(),i(e))},children:(0,S.jsx)(w,{disabled:u,title:x,icon:(0,S.jsx)(q.CopyPlus,{className:"mr-2 w-4 h-4"}),...n,children:!a&&(l??c)})})}),"CloneButton");k.displayName="CloneButton";var R=require("@refinedev/core"),I=require("lucide-react"),z=require("react/jsx-runtime"),D=n((({resource:e,hideText:r=!1,accessControl:a,meta:t,onClick:s,children:i,...l})=>{let{hidden:n,disabled:o,label:d,title:c,LinkComponent:u,to:m}=(0,R.useCreateButton)({resource:e,accessControl:a,meta:t});return n?null:(0,z.jsx)(u,{to:m,replace:!1,onClick:e=>{o?e.preventDefault():s&&(e.preventDefault(),s(e))},children:(0,z.jsx)(w,{disabled:o,title:c,icon:(0,z.jsx)(I.SquarePlusIcon,{className:"mr-2 w-4 h-4"}),...l,children:!r&&(i??d)})})}),"CreateButton");D.displayName="CreateButton";var T=require("@refinedev/core"),B=require("lucide-react"),F=d(require("react")),P=require("@radix-ui/react-icons"),L=require("@radix-ui/react-slot"),A=require("react/jsx-runtime"),M=F.forwardRef((({...e},r)=>(0,A.jsx)("nav",{ref:r,"aria-label":"breadcrumb",...e})));M.displayName="Breadcrumb";var O=F.forwardRef((({className:e,...r},a)=>(0,A.jsx)("ol",{ref:a,className:h("flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",e),...r})));O.displayName="BreadcrumbList";var E=F.forwardRef((({className:e,...r},a)=>(0,A.jsx)("li",{ref:a,className:h("inline-flex items-center gap-1.5",e),...r})));E.displayName="BreadcrumbItem";var V=F.forwardRef((({asChild:e,className:r,...a},t)=>(0,A.jsx)(e?L.Slot:"a",{ref:t,className:h("transition-colors hover:text-foreground",r),...a})));V.displayName="BreadcrumbLink";var _=F.forwardRef((({className:e,...r},a)=>(0,A.jsx)("span",{ref:a,role:"link","aria-disabled":"true","aria-current":"page",className:h("font-normal text-foreground",e),...r})));_.displayName="BreadcrumbPage";var H=n((({children:e,className:r,...a})=>(0,A.jsx)("li",{role:"presentation","aria-hidden":"true",className:h("[&>svg]:size-3.5",r),...a,children:e??(0,A.jsx)(P.ChevronRightIcon,{})})),"BreadcrumbSeparator");H.displayName="BreadcrumbSeparator";var $=n((({className:e,...r})=>(0,A.jsxs)("span",{role:"presentation","aria-hidden":"true",className:h("flex h-9 w-9 items-center justify-center",e),...r,children:[(0,A.jsx)(P.DotsHorizontalIcon,{className:"h-4 w-4"}),(0,A.jsx)("span",{className:"sr-only",children:"More"})]})),"BreadcrumbEllipsis");$.displayName="BreadcrumbElipssis";var U=require("@refinedev/core"),Q=require("react"),G=require("@radix-ui/react-slot"),W=require("@refinedev/core"),K=require("react"),X=require("react/jsx-runtime"),J=(0,K.forwardRef)((({children:e,href:r,title:a,className:t,asChild:s},i)=>{let{Link:l}=(0,W.useRouterContext)(),n=(0,W.useRouterType)(),o=(0,W.useLink)();return(0,X.jsx)(s?G.Slot:"legacy"===n?l:o,{ref:i,to:r,className:t,title:a,children:e})}));J.displayName="Link";var Y=require("lucide-react"),Z=require("react/jsx-runtime"),ee=n((({showHome:e=!0,meta:r})=>{let{breadcrumbs:a}=(0,U.useBreadcrumb)({meta:r}),{hasDashboard:t}=(0,U.useRefineContext)(),{resources:s}=(0,U.useResource)(),i=s[0],l=(0,U.matchResourceFromRoute)("/",s),n=a.map((({label:e,href:r},t)=>(0,Z.jsxs)(Q.Fragment,{children:[(0,Z.jsx)(E,{children:r?(0,Z.jsx)(V,{asChild:!0,href:"#x",children:(0,Z.jsx)(J,{href:r,children:e})}):(0,Z.jsx)(_,{children:e})}),t<a.length-1&&(0,Z.jsx)(H,{})]},t)));return(0,Z.jsx)(M,{children:(0,Z.jsxs)(O,{children:[e||t||l.found?(0,Z.jsxs)(Z.Fragment,{children:[(0,Z.jsx)(E,{children:(0,Z.jsx)(V,{href:i.list?.toString(),asChild:!0,title:i?.meta?.title??i.name??"Dashboard",children:(0,Z.jsx)(J,{href:i.list?.toString(),title:i?.meta?.title??i.name??"Dashboard",children:i?.meta?.icon??(0,Z.jsx)(Y.HomeIcon,{className:"h-4 w-4"})})})}),(0,Z.jsx)(H,{})]}):null,n]})})}),"Breadcrumbs"),re=require("@radix-ui/react-icons"),ae=d(require("@radix-ui/react-alert-dialog")),te=d(require("react")),se=require("react/jsx-runtime"),ie=ae.Root,le=ae.Trigger,ne=ae.Portal,oe=te.forwardRef((({className:e,...r},a)=>(0,se.jsx)(ae.Overlay,{className:h("fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",e),...r,ref:a})));oe.displayName=ae.Overlay.displayName;var de=te.forwardRef((({className:e,...r},a)=>(0,se.jsxs)(ne,{children:[(0,se.jsx)(oe,{}),(0,se.jsx)(ae.Content,{ref:a,className:h("fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",e),...r})]})));de.displayName=ae.Content.displayName;var ce=n((({className:e,...r})=>(0,se.jsx)("div",{className:h("flex flex-col space-y-2 text-center sm:text-left",e),...r})),"AlertDialogHeader");ce.displayName="AlertDialogHeader";var ue=n((({className:e,...r})=>(0,se.jsx)("div",{className:h("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",e),...r})),"AlertDialogFooter");ue.displayName="AlertDialogFooter";var me=te.forwardRef((({className:e,...r},a)=>(0,se.jsx)(ae.Title,{ref:a,className:h("text-lg font-semibold",e),...r})));me.displayName=ae.Title.displayName;var xe=te.forwardRef((({className:e,...r},a)=>(0,se.jsx)(ae.Description,{ref:a,className:h("text-sm text-muted-foreground",e),...r})));xe.displayName=ae.Description.displayName;var fe=te.forwardRef((({className:e,variant:r="default",size:a="default",...t},s)=>(0,se.jsx)(ae.Action,{ref:s,className:h(y({variant:r,size:a}),e),...t})));fe.displayName=ae.Action.displayName;var pe=te.forwardRef((({className:e,variant:r="outline",size:a="default",...t},s)=>(0,se.jsx)(ae.Cancel,{ref:s,className:h(y({variant:r,size:a}),"mt-2 sm:mt-0",e),...t})));pe.displayName=ae.Cancel.displayName;var he=require("class-variance-authority"),ge=require("react/jsx-runtime"),je=(0,he.cva)("inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",{variants:{variant:{default:"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",secondary:"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",destructive:"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",outline:"text-foreground"}},defaultVariants:{variant:"default"}});function be({className:e,variant:r,...a}){return(0,ge.jsx)("div",{className:h(je({variant:r}),e),...a})}n(be,"Badge");var ve=require("@radix-ui/react-icons"),Ne=require("react-day-picker"),ye=require("react/jsx-runtime");function we({className:e,classNames:r,showOutsideDays:a=!0,...t}){return(0,ye.jsx)(Ne.DayPicker,{showOutsideDays:a,className:h("p-3",e),classNames:{months:"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",month:"space-y-4",caption:"flex justify-center pt-1 relative items-center",caption_label:"text-sm font-medium",nav:"space-x-1 flex items-center",nav_button:h(y({variant:"outline"}),"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"),nav_button_previous:"absolute left-1",nav_button_next:"absolute right-1",table:"w-full border-collapse space-y-1",head_row:"flex",head_cell:"text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",row:"flex w-full mt-2",cell:h("relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md","range"===t.mode?"[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md":"[&:has([aria-selected])]:rounded-md"),day:h(y({variant:"ghost"}),"h-8 w-8 p-0 font-normal aria-selected:opacity-100"),day_range_start:"day-range-start",day_range_end:"day-range-end",day_selected:"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",day_today:"bg-accent text-accent-foreground",day_outside:"day-outside text-muted-foreground opacity-50  aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",day_disabled:"text-muted-foreground opacity-50",day_range_middle:"aria-selected:bg-accent aria-selected:text-accent-foreground",day_hidden:"invisible",...r},components:{IconLeft:n((()=>(0,ye.jsx)(ve.ChevronLeftIcon,{className:"h-4 w-4"})),"IconLeft"),IconRight:n((()=>(0,ye.jsx)(ve.ChevronRightIcon,{className:"h-4 w-4"})),"IconRight")},...t})}n(we,"Calendar"),we.displayName="Calendar";var Ce=d(require("react")),qe=require("react/jsx-runtime"),Se=Ce.forwardRef((({className:e,...r},a)=>(0,qe.jsx)("div",{ref:a,className:h("rounded-xl border bg-card text-card-foreground shadow",e),...r})));Se.displayName="Card";var ke=Ce.forwardRef((({className:e,...r},a)=>(0,qe.jsx)("div",{ref:a,className:h("flex flex-col space-y-1.5 p-6",e),...r})));ke.displayName="CardHeader";var Re=Ce.forwardRef((({className:e,...r},a)=>(0,qe.jsx)("h3",{ref:a,className:h("font-semibold leading-none tracking-tight",e),...r})));Re.displayName="CardTitle";var Ie=Ce.forwardRef((({className:e,...r},a)=>(0,qe.jsx)("p",{ref:a,className:h("text-sm text-muted-foreground",e),...r})));Ie.displayName="CardDescription";var ze=Ce.forwardRef((({className:e,...r},a)=>(0,qe.jsx)("div",{ref:a,className:h("p-6 pt-0",e),...r})));ze.displayName="CardContent";var De=Ce.forwardRef((({className:e,...r},a)=>(0,qe.jsx)("div",{ref:a,className:h("flex items-center p-6 pt-0",e),...r})));De.displayName="CardFooter";var Te=d(require("react")),Be=d(require("@radix-ui/react-checkbox")),Fe=require("@radix-ui/react-icons"),Pe=require("react/jsx-runtime"),Le=Te.forwardRef((({className:e,...r},a)=>(0,Pe.jsx)(Be.Root,{ref:a,className:h("peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",e),...r,children:(0,Pe.jsx)(Be.Indicator,{className:h("flex items-center justify-center text-current"),children:(0,Pe.jsx)(Fe.CheckIcon,{className:"h-4 w-4"})})})));Le.displayName=Be.Root.displayName;var Ae=d(require("react")),Me=require("@radix-ui/react-icons"),Oe=require("cmdk"),Ee=d(require("react")),Ve=d(require("@radix-ui/react-dialog")),_e=require("@radix-ui/react-icons"),He=require("react/jsx-runtime"),$e=Ve.Portal,Ue=Ee.forwardRef((({className:e,...r},a)=>(0,He.jsx)(Ve.Overlay,{ref:a,className:h("fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",e),...r})));Ue.displayName=Ve.Overlay.displayName;var Qe=Ee.forwardRef((({className:e,children:r,...a},t)=>(0,He.jsxs)($e,{children:[(0,He.jsx)(Ue,{}),(0,He.jsxs)(Ve.Content,{ref:t,className:h("fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",e),...a,children:[r,(0,He.jsxs)(Ve.Close,{className:"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground",children:[(0,He.jsx)(_e.Cross2Icon,{className:"h-4 w-4"}),(0,He.jsx)("span",{className:"sr-only",children:"Close"})]})]})]})));Qe.displayName=Ve.Content.displayName;var Ge=n((({className:e,...r})=>(0,He.jsx)("div",{className:h("flex flex-col space-y-1.5 text-center sm:text-left",e),...r})),"DialogHeader");Ge.displayName="DialogHeader";var We=n((({className:e,...r})=>(0,He.jsx)("div",{className:h("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",e),...r})),"DialogFooter");We.displayName="DialogFooter";var Ke=Ee.forwardRef((({className:e,...r},a)=>(0,He.jsx)(Ve.Title,{ref:a,className:h("text-lg font-semibold leading-none tracking-tight",e),...r})));Ke.displayName=Ve.Title.displayName;var Xe=Ee.forwardRef((({className:e,...r},a)=>(0,He.jsx)(Ve.Description,{ref:a,className:h("text-sm text-muted-foreground",e),...r})));Xe.displayName=Ve.Description.displayName;var Je=require("react/jsx-runtime"),Ye=Ae.forwardRef((({className:e,...r},a)=>(0,Je.jsx)(Oe.Command,{ref:a,className:h("flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",e),...r})));Ye.displayName=Oe.Command.displayName;var Ze=Ae.forwardRef((({className:e,...r},a)=>(0,Je.jsxs)("div",{className:"flex items-center border-b px-3","cmdk-input-wrapper":"",children:[(0,Je.jsx)(Me.MagnifyingGlassIcon,{className:"mr-2 h-4 w-4 shrink-0 opacity-50"}),(0,Je.jsx)(Oe.Command.Input,{ref:a,className:h("flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",e),...r})]})));Ze.displayName=Oe.Command.Input.displayName;var er=Ae.forwardRef((({className:e,...r},a)=>(0,Je.jsx)(Oe.Command.List,{ref:a,className:h("max-h-[300px] overflow-y-auto overflow-x-hidden",e),...r})));er.displayName=Oe.Command.List.displayName;var rr=Ae.forwardRef(((e,r)=>(0,Je.jsx)(Oe.Command.Empty,{ref:r,className:"py-6 text-center text-sm",...e})));rr.displayName=Oe.Command.Empty.displayName;var ar=Ae.forwardRef((({className:e,...r},a)=>(0,Je.jsx)(Oe.Command.Group,{ref:a,className:h("overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",e),...r})));ar.displayName=Oe.Command.Group.displayName;var tr=Ae.forwardRef((({className:e,...r},a)=>(0,Je.jsx)(Oe.Command.Separator,{ref:a,className:h("-mx-1 h-px bg-border",e),...r})));tr.displayName=Oe.Command.Separator.displayName;var sr=Ae.forwardRef((({className:e,...r},a)=>(0,Je.jsx)(Oe.Command.Item,{ref:a,className:h("relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",e),...r})));sr.displayName=Oe.Command.Item.displayName;var ir=n((({className:e,...r})=>(0,Je.jsx)("span",{className:h("ml-auto text-xs tracking-widest text-muted-foreground",e),...r})),"CommandShortcut");ir.displayName="CommandShortcut";var lr=d(require("react")),nr=d(require("@radix-ui/react-dropdown-menu")),or=require("@radix-ui/react-icons"),dr=require("react/jsx-runtime"),cr=nr.Root,ur=nr.Trigger,mr=lr.forwardRef((({className:e,inset:r,children:a,...t},s)=>(0,dr.jsxs)(nr.SubTrigger,{ref:s,className:h("flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",r&&"pl-8",e),...t,children:[a,(0,dr.jsx)(or.ChevronRightIcon,{className:"ml-auto h-4 w-4"})]})));mr.displayName=nr.SubTrigger.displayName;var xr=lr.forwardRef((({className:e,...r},a)=>(0,dr.jsx)(nr.SubContent,{ref:a,className:h("z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",e),...r})));xr.displayName=nr.SubContent.displayName;var fr=lr.forwardRef((({className:e,sideOffset:r=4,...a},t)=>(0,dr.jsx)(nr.Portal,{children:(0,dr.jsx)(nr.Content,{ref:t,sideOffset:r,className:h("z-50 min-w-[8rem] overflow-hidden rounded-md border border-border bg-popover p-1 text-popover-foreground shadow-md","data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",e),...a})})));fr.displayName=nr.Content.displayName;var pr=lr.forwardRef((({className:e,inset:r,...a},t)=>(0,dr.jsx)(nr.Item,{ref:t,className:h("relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",r&&"pl-8",e),...a})));pr.displayName=nr.Item.displayName;var hr=lr.forwardRef((({className:e,children:r,checked:a,...t},s)=>(0,dr.jsxs)(nr.CheckboxItem,{ref:s,className:h("relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",e),checked:a,...t,children:[(0,dr.jsx)("span",{className:"absolute left-2 flex h-3.5 w-3.5 items-center justify-center",children:(0,dr.jsx)(nr.ItemIndicator,{children:(0,dr.jsx)(or.CheckIcon,{className:"h-4 w-4"})})}),r]})));hr.displayName=nr.CheckboxItem.displayName;var gr=lr.forwardRef((({className:e,children:r,...a},t)=>(0,dr.jsxs)(nr.RadioItem,{ref:t,className:h("relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",e),...a,children:[(0,dr.jsx)("span",{className:"absolute left-2 flex h-3.5 w-3.5 items-center justify-center",children:(0,dr.jsx)(nr.ItemIndicator,{children:(0,dr.jsx)(or.DotFilledIcon,{className:"h-4 w-4 fill-current"})})}),r]})));gr.displayName=nr.RadioItem.displayName;var jr=lr.forwardRef((({className:e,inset:r,...a},t)=>(0,dr.jsx)(nr.Label,{ref:t,className:h("px-2 py-1.5 text-sm font-semibold",r&&"pl-8",e),...a})));jr.displayName=nr.Label.displayName;var br=lr.forwardRef((({className:e,...r},a)=>(0,dr.jsx)(nr.Separator,{ref:a,className:h("-mx-1 my-1 h-px bg-muted",e),...r})));br.displayName=nr.Separator.displayName;var vr=n((({className:e,...r})=>(0,dr.jsx)("span",{className:h("ml-auto text-xs tracking-widest opacity-60",e),...r})),"DropdownMenuShortcut");vr.displayName="DropdownMenuShortcut";var Nr=d(require("react")),yr=require("@radix-ui/react-slot"),wr=require("react-hook-form"),Cr=d(require("react")),qr=d(require("@radix-ui/react-label")),Sr=require("class-variance-authority"),kr=require("react/jsx-runtime"),Rr=(0,Sr.cva)("text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"),Ir=Cr.forwardRef((({className:e,...r},a)=>(0,kr.jsx)(qr.Root,{ref:a,className:h(Rr(),e),...r})));Ir.displayName=qr.Root.displayName;var zr=require("react/jsx-runtime"),Dr=wr.FormProvider,Tr=Nr.createContext({}),Br=n((({...e})=>(0,zr.jsx)(Tr.Provider,{value:{name:e.name},children:(0,zr.jsx)(wr.Controller,{...e})})),"FormField"),Fr=n((()=>{let e=Nr.useContext(Tr),r=Nr.useContext(Pr),{getFieldState:a,formState:t}=(0,wr.useFormContext)(),s=a(e.name,t);if(!e)throw new Error("useFormField should be used within <FormField>");let{id:i}=r;return{id:i,name:e.name,formItemId:`${i}-form-item`,formDescriptionId:`${i}-form-item-description`,formMessageId:`${i}-form-item-message`,...s}}),"useFormField"),Pr=Nr.createContext({}),Lr=Nr.forwardRef((({className:e,...r},a)=>{let t=Nr.useId();return(0,zr.jsx)(Pr.Provider,{value:{id:t},children:(0,zr.jsx)("div",{ref:a,className:h("space-y-2",e),...r})})}));Lr.displayName="FormItem";var Ar=Nr.forwardRef((({className:e,...r},a)=>{let{error:t,formItemId:s}=Fr();return(0,zr.jsx)(Ir,{ref:a,className:h(t&&"text-destructive",e),htmlFor:s,...r})}));Ar.displayName="FormLabel";var Mr=Nr.forwardRef((({...e},r)=>{let{error:a,formItemId:t,formDescriptionId:s,formMessageId:i}=Fr();return(0,zr.jsx)(yr.Slot,{ref:r,id:t,"aria-describedby":a?`${s} ${i}`:`${s}`,"aria-invalid":!!a,...e})}));Mr.displayName="FormControl";var Or=Nr.forwardRef((({className:e,...r},a)=>{let{formDescriptionId:t}=Fr();return(0,zr.jsx)("p",{ref:a,id:t,className:h("text-[0.8rem] text-muted-foreground",e),...r})}));Or.displayName="FormDescription";var Er=Nr.forwardRef((({className:e,children:r,...a},t)=>{let{error:s,formMessageId:i}=Fr(),l=s?String(s?.message):r;return l?(0,zr.jsx)("p",{ref:t,id:i,className:h("text-[0.8rem] font-medium text-destructive",e),...a,children:l}):null}));Er.displayName="FormMessage";var Vr=d(require("react")),_r=require("react/jsx-runtime"),Hr=Vr.forwardRef((({className:e,type:r,...a},t)=>(0,_r.jsx)("input",{type:r,className:h("flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",e),ref:t,...a})));Hr.displayName="Input";var $r=d(require("react")),Ur=d(require("@radix-ui/react-popover")),Qr=require("react/jsx-runtime"),Gr=Ur.Root,Wr=Ur.Trigger,Kr=$r.forwardRef((({className:e,align:r="center",sideOffset:a=4,...t},s)=>(0,Qr.jsx)(Ur.Portal,{children:(0,Qr.jsx)(Ur.Content,{ref:s,align:r,sideOffset:a,className:h("z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",e),...t})})));Kr.displayName=Ur.Content.displayName;var Xr=require("@radix-ui/react-icons"),Jr=d(require("react-resizable-panels")),Yr=require("react/jsx-runtime"),Zr=n((({className:e,...r})=>(0,Yr.jsx)(Jr.PanelGroup,{className:h("flex h-full w-full data-[panel-group-direction=vertical]:flex-col",e),...r})),"ResizablePanelGroup"),ea=Jr.Panel,ra=n((({withHandle:e,className:r,...a})=>(0,Yr.jsx)(Jr.PanelResizeHandle,{className:h("relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",r),...a,children:e&&(0,Yr.jsx)("div",{className:"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border",children:(0,Yr.jsx)(Xr.DragHandleDots2Icon,{className:"h-2.5 w-2.5"})})})),"ResizableHandle"),aa=d(require("react")),ta=d(require("@radix-ui/react-scroll-area")),sa=require("react/jsx-runtime"),ia=aa.forwardRef((({className:e,children:r,...a},t)=>(0,sa.jsxs)(ta.Root,{ref:t,className:h("relative overflow-hidden",e),...a,children:[(0,sa.jsx)(ta.Viewport,{className:"h-full w-full rounded-[inherit]",children:r}),(0,sa.jsx)(la,{}),(0,sa.jsx)(ta.Corner,{})]})));ia.displayName=ta.Root.displayName;var la=aa.forwardRef((({className:e,orientation:r="vertical",...a},t)=>(0,sa.jsx)(ta.ScrollAreaScrollbar,{ref:t,orientation:r,className:h("flex touch-none select-none transition-colors","vertical"===r&&"h-full w-2.5 border-l border-l-transparent p-[1px]","horizontal"===r&&"h-2.5 flex-col border-t border-t-transparent p-[1px]",e),...a,children:(0,sa.jsx)(ta.ScrollAreaThumb,{className:"relative flex-1 rounded-full bg-border"})})));la.displayName=ta.ScrollAreaScrollbar.displayName;var na=d(require("react")),oa=require("@radix-ui/react-icons"),da=d(require("@radix-ui/react-select")),ca=require("react/jsx-runtime"),ua=da.Root,ma=da.Value,xa=na.forwardRef((({className:e,children:r,...a},t)=>(0,ca.jsxs)(da.Trigger,{ref:t,className:h("flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",e),...a,children:[r,(0,ca.jsx)(da.Icon,{asChild:!0,children:(0,ca.jsx)(oa.CaretSortIcon,{className:"h-4 w-4 opacity-50"})})]})));xa.displayName=da.Trigger.displayName;var fa=na.forwardRef((({className:e,...r},a)=>(0,ca.jsx)(da.ScrollUpButton,{ref:a,className:h("flex cursor-default items-center justify-center py-1",e),...r,children:(0,ca.jsx)(oa.ChevronUpIcon,{})})));fa.displayName=da.ScrollUpButton.displayName;var pa=na.forwardRef((({className:e,...r},a)=>(0,ca.jsx)(da.ScrollDownButton,{ref:a,className:h("flex cursor-default items-center justify-center py-1",e),...r,children:(0,ca.jsx)(oa.ChevronDownIcon,{})})));pa.displayName=da.ScrollDownButton.displayName;var ha=na.forwardRef((({className:e,children:r,position:a="popper",...t},s)=>(0,ca.jsx)(da.Portal,{children:(0,ca.jsxs)(da.Content,{ref:s,className:h("relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2","popper"===a&&"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",e),position:a,...t,children:[(0,ca.jsx)(fa,{}),(0,ca.jsx)(da.Viewport,{className:h("p-1","popper"===a&&"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"),children:r}),(0,ca.jsx)(pa,{})]})})));ha.displayName=da.Content.displayName;var ga=na.forwardRef((({className:e,...r},a)=>(0,ca.jsx)(da.Label,{ref:a,className:h("px-2 py-1.5 text-sm font-semibold",e),...r})));ga.displayName=da.Label.displayName;var ja=na.forwardRef((({className:e,children:r,...a},t)=>(0,ca.jsxs)(da.Item,{ref:t,className:h("relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",e),...a,children:[(0,ca.jsx)("span",{className:"absolute right-2 flex h-3.5 w-3.5 items-center justify-center",children:(0,ca.jsx)(da.ItemIndicator,{children:(0,ca.jsx)(oa.CheckIcon,{className:"h-4 w-4"})})}),(0,ca.jsx)(da.ItemText,{children:r})]})));ja.displayName=da.Item.displayName;var ba=na.forwardRef((({className:e,...r},a)=>(0,ca.jsx)(da.Separator,{ref:a,className:h("-mx-1 my-1 h-px bg-muted",e),...r})));ba.displayName=da.Separator.displayName;var va=d(require("react")),Na=d(require("@radix-ui/react-separator")),ya=require("react/jsx-runtime"),wa=va.forwardRef((({className:e,orientation:r="horizontal",decorative:a=!0,...t},s)=>(0,ya.jsx)(Na.Root,{ref:s,decorative:a,orientation:r,className:h("shrink-0 bg-border","horizontal"===r?"h-[1px] w-full":"h-full w-[1px]",e),...t})));wa.displayName=Na.Root.displayName;var Ca=require("next-themes"),qa=require("sonner"),Sa=require("react/jsx-runtime"),ka=n((({...e})=>{let{theme:r="system"}=(0,Ca.useTheme)();return(0,Sa.jsx)(qa.Toaster,{theme:r,className:"toaster group",toastOptions:{classNames:{toast:"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",description:"group-[.toast]:text-muted-foreground",actionButton:"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",cancelButton:"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground"}},...e})}),"Toaster"),Ra=d(require("react")),Ia=require("react/jsx-runtime"),za=Ra.forwardRef((({className:e,...r},a)=>(0,Ia.jsx)("div",{className:"relative w-full overflow-auto",children:(0,Ia.jsx)("table",{ref:a,className:h("w-full caption-bottom text-sm",e),...r})})));za.displayName="Table";var Da=Ra.forwardRef((({className:e,...r},a)=>(0,Ia.jsx)("thead",{ref:a,className:h("[&_tr]:border-b",e),...r})));Da.displayName="TableHeader";var Ta=Ra.forwardRef((({className:e,...r},a)=>(0,Ia.jsx)("tbody",{ref:a,className:h("[&_tr:last-child]:border-0",e),...r})));Ta.displayName="TableBody";var Ba=Ra.forwardRef((({className:e,...r},a)=>(0,Ia.jsx)("tfoot",{ref:a,className:h("border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",e),...r})));Ba.displayName="TableFooter";var Fa=Ra.forwardRef((({className:e,...r},a)=>(0,Ia.jsx)("tr",{ref:a,className:h("border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",e),...r})));Fa.displayName="TableRow";var Pa=Ra.forwardRef((({className:e,...r},a)=>(0,Ia.jsx)("th",{ref:a,className:h("h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",e),...r})));Pa.displayName="TableHead";var La=Ra.forwardRef((({className:e,...r},a)=>(0,Ia.jsx)("td",{ref:a,className:h("p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",e),...r})));La.displayName="TableCell";var Aa=Ra.forwardRef((({className:e,...r},a)=>(0,Ia.jsx)("caption",{ref:a,className:h("mt-4 text-sm text-muted-foreground",e),...r})));Aa.displayName="TableCaption";var Ma=d(require("react")),Oa=require("react/jsx-runtime"),Ea=Ma.forwardRef((({className:e,...r},a)=>(0,Oa.jsx)("textarea",{className:h("flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",e),ref:a,...r})));Ea.displayName="Textarea";var Va=d(require("react")),_a=d(require("@radix-ui/react-tooltip")),Ha=require("react/jsx-runtime"),$a=_a.Provider,Ua=_a.Root,Qa=_a.Trigger,Ga=Va.forwardRef((({className:e,sideOffset:r=4,...a},t)=>(0,Ha.jsx)(_a.Content,{ref:t,sideOffset:r,className:h("z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",e),...a})));Ga.displayName=_a.Content.displayName;var Wa=require("react"),Ka=require("react/jsx-runtime"),Xa=(0,Wa.forwardRef)((({...e},r)=>{let[a,t]=(0,Wa.useState)(!1),s=n((()=>"object"==typeof e.value&&"id"in e.value?e.value.id:e.value),"value");return(0,Ka.jsxs)(Gr,{open:a,onOpenChange:t,children:[(0,Ka.jsx)(Wr,{asChild:!0,children:(0,Ka.jsx)(Mr,{children:(0,Ka.jsxs)(w,{disabled:e.disabled,variant:"outline",role:"combobox","aria-expanded":a,className:h("w-full sm:w-[250px] flex justify-between",!s()&&"text-muted-foreground"),children:[s()?e.options?.find((e=>e.value===s()))?.label:e.placeholder??"Select",(0,Ka.jsx)(re.CaretSortIcon,{className:"ml-2 h-4 w-4 shrink-0 opacity-50"})]})})}),(0,Ka.jsx)(Kr,{className:"w-full max-w-full sm:w-[250px] p-0",children:(0,Ka.jsxs)(Ye,{className:"rounded-lg border shadow-md",ref:r,children:[(0,Ka.jsx)(Ze,{placeholder:"Type a command or search..."}),(0,Ka.jsxs)(er,{children:[(0,Ka.jsx)(rr,{children:"No results found."}),(0,Ka.jsx)(ar,{heading:"Suggestions",children:(0,Ka.jsx)(ia,{className:"max-h-52 overflow-y-auto",children:e.options?.map((r=>(0,Ka.jsxs)(sr,{value:r.label,onSelect:()=>{e.onChange?.(r.value),t(!1)},children:[r.label,(0,Ka.jsx)(re.CheckIcon,{className:h("ml-auto h-4 w-4",r.value===s()?"opacity-100":"opacity-0")})]},r.value)))})})]})]})})]})}));Xa.displayName="Combobox";var Ja=require("lucide-react"),Ya=require("react"),Za=require("react/jsx-runtime"),et=n((({children:e,title:r="Are you sure?",description:a="This action cannot be undone.",okText:t="Ok",cancelText:s="Cancel",okButtonSize:i="default",cancelButtonSize:l="default",okButtonVariant:n="default",cancelButtonVariant:o="outline",loading:d=!1,okIconSide:c="left",cancelIconSide:u="left",onConfirm:m,okIcon:x,cancelIcon:f,open:p,onOpenChange:h,defaultOpen:g})=>{let j=(0,Ya.useMemo)((()=>(0,Ya.isValidElement)(f)?f:(0,Za.jsx)(Ja.XIcon,{className:"mr-2 h-4 w-4"})),[f]),b=(0,Ya.useMemo)((()=>d?(0,Za.jsx)(v,{className:"mr-2"}):(0,Ya.isValidElement)(x)?x:(0,Za.jsx)(Ja.CheckIcon,{className:"mr-2 h-4 w-4"})),[x,d]);return(0,Za.jsxs)(ie,{open:p,onOpenChange:h,defaultOpen:g,children:[(0,Za.jsx)(le,{asChild:!0,children:e}),(0,Za.jsxs)(de,{children:[(0,Za.jsxs)(ce,{children:[(0,Za.jsx)(me,{children:r}),(0,Za.jsx)(xe,{children:a})]}),(0,Za.jsxs)(ue,{children:[(0,Za.jsxs)(pe,{variant:o,size:l,disabled:d,children:["left"===u&&j,s,"right"===u&&j]}),(0,Za.jsxs)(fe,{variant:n,size:i,disabled:d,onClick:m,children:["left"===c&&b,t,"right"===c&&b]})]})]})]})}),"ConfirmDialog");et.displayName="ConfirmDialog";var rt=require("react"),at=require("react/jsx-runtime"),tt=n((e=>(0,at.jsx)(Br,{control:e.control,name:e.name,render:({field:r})=>(0,at.jsxs)(Lr,{className:h(e.className,e.isCheckbox?"flex flex-row items-center space-x-3 space-y-0":""),children:[!e.isCheckbox&&(0,at.jsx)(Ar,{children:e.label}),(0,at.jsx)(Mr,{children:(0,rt.cloneElement)(e.children,{...r,...e.children.props})}),e.isCheckbox&&(0,at.jsx)(Ar,{className:"text-sm font-normal",children:e.label}),e.description&&(0,at.jsx)(Or,{children:e.description}),(0,at.jsx)(Er,{})]})})),"Field"),st=require("@refinedev/core"),it=require("react"),lt=require("react/jsx-runtime"),nt=n((({formProps:e,isWatchable:r,saveButtonProps:a,...t})=>{let s=(0,it.useRef)(!1),{resource:i,action:l}=(0,st.useParsed)(),n=(0,st.useRouterType)(),o=(0,st.useBack)(),{goBack:d}=(0,st.useNavigation)(),c="list"!==l||typeof l<"u"?"legacy"===n?d:o:void 0;r&&!s.current&&(s.current=!0,t.watch());let u=t.handleSubmit((e=>{t.refineCore.onFinish(t.getValues()).then()}));return(0,lt.jsx)(Dr,{...t,children:(0,lt.jsx)("form",{...e,onSubmit:u,children:(0,lt.jsxs)(Se,{className:"border-border/40 shadow-sm",children:[(0,lt.jsx)(ze,{className:"pt-6 space-y-4",children:t.children}),(0,lt.jsxs)(De,{className:"flex justify-end gap-x-4",children:[(0,lt.jsx)(w,{type:"button",onClick:c,disabled:t.refineCore.formLoading,variant:"outline",children:"Cancel"}),(0,lt.jsx)(Xt,{type:"submit",loading:t.refineCore.formLoading,...a})]})]})})})}),"Form"),ot=require("next-themes"),dt=require("@radix-ui/react-icons"),ct=require("react/jsx-runtime"),ut=n((()=>{let{setTheme:e}=(0,ot.useTheme)();return(0,ct.jsxs)(cr,{children:[(0,ct.jsx)(ur,{asChild:!0,children:(0,ct.jsxs)(w,{variant:"ghost",size:"icon",children:[(0,ct.jsx)(dt.SunIcon,{className:"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0"}),(0,ct.jsx)(dt.MoonIcon,{className:"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100"}),(0,ct.jsx)("span",{className:"sr-only",children:"Toggle theme"})]})}),(0,ct.jsxs)(fr,{align:"end",children:[(0,ct.jsx)(pr,{onClick:()=>e("light"),children:"Light"}),(0,ct.jsx)(pr,{onClick:()=>e("dark"),children:"Dark"}),(0,ct.jsx)(pr,{onClick:()=>e("system"),children:"System"})]})]})}),"ModeToggle"),mt=require("react/jsx-runtime"),xt=n((({extra:e,...r})=>(0,mt.jsx)("div",{className:"w-full",children:(0,mt.jsxs)("div",{className:h("flex h-20 items-end lg:justify-between",r.className,!r.breadcrumb&&"h-auto"),children:[(0,mt.jsxs)("div",{className:"min-w-0 flex-1",children:[r.breadcrumb,(0,mt.jsx)("div",{className:"inline-flex flex-row items-center gap-x-4 mt-3",children:(0,mt.jsxs)("div",{className:"inline-flex flex-col",children:[(0,mt.jsx)("h2",{className:"text-2xl font-bold leading-7 text-black dark:text-white sm:truncate sm:text-3xl sm:tracking-tight",children:r.title}),r.subTitle&&(0,mt.jsx)("div",{className:"mt-2 flex items-center text-sm text-gray-300",children:r.subTitle})]})})]}),(0,mt.jsx)("div",{className:"flex lg:ml-4 lg:mt-0",children:e})]})})),"PageHeader"),ft=d(require("react")),pt=require("react/jsx-runtime"),ht=(0,ft.forwardRef)((({...e},r)=>{let a=ft.default.useRef(null);return(0,pt.jsxs)(ua,{disabled:e.disabled||0===e.options?.length,onValueChange:e.onChange,defaultValue:e.value,value:e.value,children:[(0,pt.jsx)(Mr,{children:(0,pt.jsx)(xa,{ref:a,children:(0,pt.jsx)(ma,{placeholder:e.placeholder??"Select"})})}),(0,pt.jsx)(ha,{style:{width:a.current?.offsetWidth},ref:r,children:e.options?.map(((e,r)=>(0,pt.jsx)(ja,{value:e.value,children:e.label},r)))})]})}));ht.displayName="Select";var gt=require("@refinedev/core"),jt=require("react-use"),bt=d(require("react")),vt=require("react/jsx-runtime"),Nt=n((({isCollapsed:e})=>{let{menuItems:r}=(0,gt.useMenu)(),a=(0,gt.useResourceParams)(),{pathname:t}=(0,jt.useLocation)(),s=String(t),i=n((e=>{let r=e.meta?.icon;return bt.default.isValidElement(r)?bt.default.cloneElement(r,{className:"mr-2 w-4 h-4"}):null}),"GetIcon");return(0,vt.jsx)("div",{"data-collapsed":e,className:"group flex flex-col gap-4 py-2 justify-between h-[94dvh] xl:h-[84dvh] data-[collapsed=true]:py-2",children:(0,vt.jsx)("nav",{className:"grid gap-1 px-2 group-[[data-collapsed=true]]:justify-center group-[[data-collapsed=true]]:px-2",children:r.filter((e=>!e.meta?.hide)).map(((r,t)=>{let l=[r.list?.toString(),r.create?.toString(),r.edit?.toString()?.replace(":id",a.id),r.show?.toString()?.replace(":id",a.id)].filter(Boolean),n=l.includes(s)||l.some((e=>e?.startsWith(s)||s.startsWith(e)));return e?(0,vt.jsxs)(Ua,{delayDuration:0,children:[(0,vt.jsx)(Qa,{asChild:!0,children:(0,vt.jsxs)(J,{href:r.list?.toString()??"/#",title:r.meta?.title??r.name,className:h(y({variant:"ghost"}),"justify-start",n?"bg-primary text-primary-foreground hover:bg-primary/80 hover:text-primary-foreground":""),children:[r.meta?.icon,(0,vt.jsxs)("span",{className:"sr-only",children:[r.meta?.title??r.label," ",r.list?"List":"Create"]})]},t)}),(0,vt.jsxs)(Ga,{side:"right",className:"flex items-center gap-4",children:[r.label,r.meta?.label&&(0,vt.jsx)("span",{className:"ml-auto text-muted-foreground",children:r.meta?.label})]})]},t):(0,vt.jsxs)(J,{href:r.list?.toString()??"/#",title:r.meta?.title??r.name,className:h(y({variant:"ghost"}),"justify-start",n?"bg-primary text-primary-foreground hover:bg-primary/80 hover:text-primary-foreground":""),children:[i(r),r.meta?.title??r.name]},t)}))})})}),"Sidebar");Nt.displayName="Sidebar";var yt=require("react/jsx-runtime"),wt=n((({resource:e,recordItemId:r,onSuccess:a,mutationMode:t,confirmTitle:s,confirmDescription:i,successNotification:l,errorNotification:n,hideText:o=!1,accessControl:d,meta:c,dataProviderName:u,confirmOkText:m,confirmCancelText:x,invalidates:f,children:p,...h})=>{let{title:g,label:j,hidden:b,disabled:v,loading:N,confirmTitle:y,confirmOkLabel:C,cancelLabel:q,onConfirm:S}=(0,T.useDeleteButton)({resource:e,id:r,dataProviderName:u,invalidates:f,meta:c,onSuccess:a,mutationMode:t,errorNotification:n,successNotification:l,accessControl:d});return b?null:(0,yt.jsx)(et,{okText:m??C,cancelText:x??q,okButtonVariant:"destructive",cancelButtonVariant:"outline",title:s??y,description:i,loading:N,onConfirm:S,children:(0,yt.jsx)(w,{disabled:v,title:g,loading:N,icon:(0,yt.jsx)(B.Trash2Icon,{className:"mr-2 w-4 h-4"}),...h,children:!o&&(p??j)})})}),"DeleteButton");wt.displayName="DeleteButton";var Ct=require("@refinedev/core"),qt=require("lucide-react"),St=require("react/jsx-runtime"),kt=n((({resource:e,recordItemId:r,hideText:a=!1,accessControl:t,meta:s,onClick:i,children:l,...n})=>{let{hidden:o,disabled:d,label:c,title:u,LinkComponent:m,to:x}=(0,Ct.useEditButton)({resource:e,id:r,accessControl:t,meta:s});return o?null:(0,St.jsx)(m,{to:x,replace:!1,onClick:e=>{d?e.preventDefault():i&&(e.preventDefault(),i(e))},children:(0,St.jsx)(w,{disabled:d,title:u,icon:(0,St.jsx)(qt.SquarePenIcon,{className:"mr-2 w-4 h-4"}),...n,children:!a&&(l??c)})})}),"EditButton");kt.displayName="EditButton";var Rt=require("@radix-ui/react-slot"),It=require("@refinedev/core"),zt=require("lucide-react"),Dt=require("react/jsx-runtime"),Tt=n((({hideText:e=!1,resource:r,recordItemId:a,accessControl:t,access:s,children:i,...l})=>{let{label:n}=(0,It.useExportButton)(),o=t?.enabled?It.CanAccess:Rt.Slot;return t?.hideIfUnauthorized&&t.enabled?null:(0,Dt.jsx)(o,{params:{id:a},resource:r,action:"export",...s,children:(0,Dt.jsx)(w,{icon:(0,Dt.jsx)(zt.ShareIcon,{className:"mr-2 w-4 h-4"}),...l,children:!e&&(i??n)})})}),"ExportButton");Tt.displayName="ExportButton";var Bt=require("@radix-ui/react-slot"),Ft=require("@refinedev/core"),Pt=require("lucide-react"),Lt=require("react/jsx-runtime"),At=n((({hideText:e=!1,resource:r,onChange:a,accept:t="image/*,application/*",recordItemId:s,accessControl:i,access:l,children:o,...d})=>{let{label:c}=(0,Ft.useImportButton)(),u=i?.enabled?Ft.CanAccess:Bt.Slot,m=n((()=>{let e=document.createElement("input");e.type="file",e.accept=t,e.onchange=r=>{r.target instanceof HTMLInputElement&&(a(Array.from(r.target.files??[])),e.remove())},e.click()}),"onClick");return i?.hideIfUnauthorized&&i.enabled?null:(0,Lt.jsx)(u,{params:{id:s},resource:r,action:"import",...l,children:(0,Lt.jsx)(w,{onClick:m,icon:(0,Lt.jsx)(Pt.ImportIcon,{className:"mr-2 w-4 h-4"}),...d,children:!e&&(o??c)})})}),"ImportButton");At.displayName="ImportButton";var Mt=require("@refinedev/core"),Ot=require("lucide-react"),Et=require("react/jsx-runtime"),Vt=n((({resource:e,hideText:r=!1,accessControl:a,meta:t,children:s,onClick:i,...l})=>{let{hidden:n,disabled:o,label:d,title:c,LinkComponent:u,to:m}=(0,Mt.useListButton)({resource:e,accessControl:a,meta:t});return n?null:(0,Et.jsx)(u,{to:m,replace:!1,onClick:e=>{o?e.preventDefault():i&&(e.preventDefault(),i(e))},children:(0,Et.jsx)(w,{disabled:o,title:c,icon:(0,Et.jsx)(Ot.ListIcon,{className:"mr-2 w-4 h-4"}),...l,children:!r&&(s??d)})})}),"ListButton");Vt.displayName="ListButton";var _t=require("@refinedev/core"),Ht=require("lucide-react"),$t=require("react/jsx-runtime"),Ut=n((({resource:e,recordItemId:r,hideText:a=!1,dataProviderName:t,children:s,...i})=>{let{onClick:l,label:n,loading:o}=(0,_t.useRefreshButton)({resource:e,id:r,dataProviderName:t});return(0,$t.jsx)(w,{onClick:l,loading:o,icon:(0,$t.jsx)(Ht.RefreshCwIcon,{className:"mr-2 w-4 h-4"}),...i,children:!a&&(s??n)})}),"RefreshButton");Ut.displayName="RefreshButton";var Qt=require("@radix-ui/react-slot"),Gt=require("@refinedev/core"),Wt=require("lucide-react"),Kt=require("react/jsx-runtime"),Xt=n((({hideText:e=!1,children:r,accessControl:a,access:t,resource:s,recordItemId:i,...l})=>{let{label:n}=(0,Gt.useSaveButton)(),o=a?.enabled?Gt.CanAccess:Qt.Slot;return a?.hideIfUnauthorized&&a.enabled?null:(0,Kt.jsx)(o,{params:{id:i},resource:s,action:"save",...t,children:(0,Kt.jsx)(w,{icon:(0,Kt.jsx)(Wt.SaveIcon,{className:"mr-2 w-4 h-4"}),...l,children:!e&&(r??n)})})}),"SaveButton");Xt.displayName="SaveButton";var Jt=require("@refinedev/core"),Yt=require("lucide-react"),Zt=require("react/jsx-runtime"),es=n((({resource:e,recordItemId:r,hideText:a=!1,accessControl:t,meta:s,children:i,onClick:l,...n})=>{let{to:o,label:d,title:c,hidden:u,disabled:m,LinkComponent:x}=(0,Jt.useShowButton)({resource:e,id:r,accessControl:t,meta:s});return u?null:(0,Zt.jsx)(x,{to:o,replace:!1,onClick:e=>{m?e.preventDefault():l&&(e.preventDefault(),l(e))},children:(0,Zt.jsx)(w,{icon:(0,Zt.jsx)(Yt.EyeIcon,{className:"mr-2 w-4 h-4"}),title:c,disabled:m,...n,children:!a&&(i??d)})})}),"ShowButton");es.displayName="ShowButton";var rs=require("@refinedev/core"),as=require("react"),ts=require("react/jsx-runtime"),ss=n((({title:e,resource:r,breadcrumb:a,extra:t,children:s})=>{let i=(0,rs.useTranslate)(),{options:{breadcrumb:l}={}}=(0,rs.useRefineContext)(),n=(0,rs.useUserFriendlyName)(),{resource:o,identifier:d}=(0,rs.useResource)(r),c=typeof a>"u"?l:a;return(0,ts.jsxs)(ts.Fragment,{children:[(0,ts.jsx)(xt,{title:e??i(`${d}.titles.List`,`Create ${n(o?.meta?.label??d,"singular")}`),isBack:!0,breadcrumb:(0,as.isValidElement)(c)?c:(0,ts.jsx)(ee,{}),extra:t??(0,ts.jsx)(ts.Fragment,{children:(0,ts.jsx)(Vt,{resource:r})})}),(0,ts.jsx)("div",{className:"pt-4 !mt-0",children:s})]})}),"CreatePage");ss.displayName="CreatePage";var is=require("@refinedev/core"),ls=require("react"),ns=require("react/jsx-runtime"),os=n((({title:e,resource:r,extra:a,breadcrumb:t,children:s})=>{let i=(0,is.useTranslate)(),{options:{breadcrumb:l}={}}=(0,is.useRefineContext)(),{list:n}=(0,is.useNavigation)(),o=(0,is.useUserFriendlyName)(),{resource:d,identifier:c}=(0,is.useResource)(r),u=typeof t>"u"?l:t;return(0,ns.jsxs)(ns.Fragment,{children:[(0,ns.jsx)(xt,{title:e??i(`${c}.titles.List`,`Edit ${o(d?.meta?.label??c,"plural")}`),isBack:!0,breadcrumb:(0,ls.isValidElement)(u)?u:(0,ns.jsx)(ee,{}),extra:a??(0,ns.jsxs)("div",{className:"inline-flex flex-row items-center gap-x-2",children:[(0,ns.jsx)(es,{resource:r}),(0,ns.jsx)(wt,{resource:r,onSuccess:()=>{n(d?.name)}})]})}),(0,ns.jsx)("div",{className:"pt-4",children:s})]})}),"EditPage");os.displayName="EditPage";var ds=require("@refinedev/core"),cs=require("react"),us=require("react/jsx-runtime"),ms=n((({title:e,resource:r,breadcrumb:a,createButtonProps:t,className:s,isCreate:i=!0,extra:l,children:n})=>{let o=(0,ds.useTranslate)(),{options:{breadcrumb:d}={}}=(0,ds.useRefineContext)(),c=(0,ds.useUserFriendlyName)(),{resource:u,identifier:m}=(0,ds.useResource)(r),x=typeof a>"u"?d:a;return(0,us.jsxs)(us.Fragment,{children:[(0,us.jsx)(xt,{title:e??o(`${m}.titles.List`,`List ${c(u?.meta?.label??m,"plural")}`),breadcrumb:(0,cs.isValidElement)(x)?x:(0,us.jsx)(ee,{}),extra:l??(0,us.jsx)(us.Fragment,{children:(0,us.jsx)("div",{className:"inline-flex flex-row gap-4",children:i&&(0,us.jsx)(D,{...t,resource:t?.resource??m})})})}),(0,us.jsx)("div",{className:h("pt-2 sm:pt-4 !mt-0",s),children:n})]})}),"ListPage");ms.displayName="ListPage";var xs=require("@refinedev/core"),fs=require("react"),ps=require("react/jsx-runtime"),hs=n((({title:e,children:r})=>(0,ps.jsx)(ps.Fragment,{children:(0,ps.jsx)("dl",{className:"flex flex-wrap",children:(0,ps.jsxs)("div",{className:"flex-auto pt-4",children:[(0,ps.jsx)("dt",{className:"scroll-m-20 text-xs font-semibold tracking-tight",children:e}),(0,ps.jsx)("dd",{className:"mt-1 text-base font-normal text-foreground leading-7",children:r})]})})})),"Row"),gs=require("react/jsx-runtime"),js=n((({title:e,resource:r,breadcrumb:a,isEdit:t=!0,isDelete:s=!0,extra:i,children:l})=>{let n=(0,xs.useTranslate)(),{options:{breadcrumb:o}={}}=(0,xs.useRefineContext)(),d=(0,xs.useUserFriendlyName)(),{resource:c,identifier:u}=(0,xs.useResource)(r),{list:m}=(0,xs.useNavigation)(),x=typeof a>"u"?o:a;return(0,gs.jsxs)(gs.Fragment,{children:[(0,gs.jsx)(xt,{title:e??n(`${u}.titles.List`,`Show ${d(c?.meta?.label??u,"singular")}`),breadcrumb:(0,fs.isValidElement)(x)?x:(0,gs.jsx)(ee,{}),isBack:!0,extra:i??(0,gs.jsxs)("div",{className:"inline-flex items-center gap-x-2",children:[t&&(0,gs.jsx)(kt,{resource:r}),s&&(0,gs.jsx)(wt,{resource:r,onSuccess:()=>{m(c?.name)}})]})}),(0,gs.jsx)("div",{className:"relative pt-4 !mt-0",children:l})]})}),"ShowPage");js.Row=hs,js.displayName="ShowPage";var bs=require("next-themes"),vs=require("react/jsx-runtime");function Ns({children:e,...r}){return(0,vs.jsx)(bs.ThemeProvider,{...r,children:e})}n(Ns,"ThemeProvider");var ys=require("react/jsx-runtime"),ws=n((({attribute:e,defaultTheme:r,enableSystem:a,disableTransitionOnChange:t,enableColorScheme:s,forcedTheme:i,nonce:l,storageKey:n,themes:o,value:d,children:c})=>(0,ys.jsx)(Ns,{attribute:e??"class",defaultTheme:r??"system",enableSystem:a??!0,disableTransitionOnChange:t??!1,enableColorScheme:s??!0,forcedTheme:i,nonce:l,storageKey:n,themes:o,value:d,children:(0,ys.jsxs)($a,{delayDuration:0,skipDelayDuration:0,disableHoverableContent:!0,children:[c,(0,ys.jsx)(ka,{})]})})),"BaseLayout");ws.displayName="BaseLayout";var Cs=d(require("react"));function qs(e,r){if(r===e)return!1;let a=Object.values(r),t=Object.values(e);if(a.length!==t.length||a.some(((e,r)=>e!==t[r])))return!0;let s=Object.keys(e);return Object.keys(r).some(((e,r)=>e!==s[r]))}function Ss(e,r){return e.matches[r]=!1,e.mediaQueries[r]={},e}function ks(e){let r=Object.keys(e);return typeof window>"u"?r.reduce(Ss,{mediaQueries:{},matches:{}}):r.reduce(((r,a)=>{let t=window.matchMedia(e[a]);return r.mediaQueries[a]=t,r.matches[a]=t.matches,r}),{mediaQueries:{},matches:{}})}function Rs(e,r){function a(r,a){return r[a]=e.mediaQueries[a].matches,r}switch(n(a,"_ref2"),r.type){case"updateMatches":return{matches:Object.keys(e.mediaQueries).reduce(a,{}),mediaQueries:e.mediaQueries};case"setQueries":return ks(r.queries)}}function Is(e){let r=Cs.useRef(e),[a,t]=Cs.useReducer(Rs,e,ks);function s(){return t({type:"updateMatches"})}function i(e){let r=s;return typeof e.addListener<"u"?e.addListener(r):e.addEventListener("change",r),r}Cs.useEffect((()=>{qs(e,r.current)&&(t({type:"setQueries",queries:e}),r.current=e)}),[e]),n(s,"_ref3"),n(i,"_ref4"),Cs.useEffect((()=>{let e=Object.values(a.mediaQueries),r=e.map(i);function t(e,a){typeof e.addListener<"u"?e.removeListener(r[a]):e.removeEventListener("change",r[a])}return n(t,"_ref5"),()=>{e.forEach(t)}}),[a.mediaQueries]);let{matches:l}=a,o=Cs.useMemo((()=>Object.values(l)),[l]);return{matches:l,matchesAny:o.some(Boolean),matchesAll:o.length>0&&o.every(Boolean)}}function zs(e){return Is(Ts(e)).matchesAll}n(qs,"queriesDidChange"),n(Ss,"_ref"),n(ks,"init"),n(Rs,"reducer"),n(Is,"useMediaQueries"),n(zs,"useMediaQuery");var Ds={};function Ts(e){return void 0===Ds[e]&&(Ds[e]={default:e}),Ds[e]}n(Ts,"getObj");var Bs=require("@refinedev/core"),Fs=require("react"),Ps=require("react/jsx-runtime"),Ls=n((({children:e,defaultLayout:r,defaultCollapsed:a=!1,navCollapsedSize:t,navbar:s,footer:i,logo:l,attribute:n,defaultTheme:o,enableSystem:d,disableTransitionOnChange:c,enableColorScheme:u,forcedTheme:m,nonce:x,storageKey:f,themes:p,value:g})=>{let{resources:j}=(0,Bs.useResource)(),b=j?.[0],v=zs("only screen and (max-width: 579.999px)"),N=zs("only screen and (min-width: 640px) and (max-width: 767.999px)"),y=zs("only screen and (min-width: 768px) and (max-width: 1023.999px)"),w=zs("only screen and (min-width: 1024px)"),[C,q]=(0,Fs.useState)(v??a),S=(0,Fs.useMemo)((()=>r||(v?[15,85]:N?[20,80]:y?[25,75]:[15,85])),[r,v,N,y]),k=(0,Fs.useMemo)((()=>w?{minSize:11,maxSize:15}:y?{minSize:15,maxSize:25}:N?{minSize:20,maxSize:30}:{minSize:15,maxSize:15}),[N,y,w]),R=(0,Fs.useMemo)((()=>C||v||N||y),[C,y,N,v]),I=(0,Fs.useMemo)((()=>{if(!l)return null;if(!R&&(0,Fs.isValidElement)(l.default))return(0,Fs.cloneElement)(l.default,{className:"w-auto h-8"});let e=R?l.collapsed:l.default;return(0,Fs.isValidElement)(e)?(0,Fs.cloneElement)(e,{className:"w-auto h-8"}):null}),[l,r,R]);return(0,Ps.jsx)(Ps.Fragment,{children:(0,Ps.jsx)(ws,{attribute:n,defaultTheme:o,enableSystem:d,disableTransitionOnChange:c,enableColorScheme:u,forcedTheme:m,nonce:x,storageKey:f,themes:p,value:g,children:(0,Ps.jsxs)(Zr,{direction:"horizontal",onLayout:e=>{document.cookie=`react-resizable-panels:layout=${JSON.stringify(e)}`},className:"h-full items-stretch",children:[(0,Ps.jsxs)(ea,{defaultSize:S[0],collapsedSize:t,collapsible:!0,minSize:k.minSize,maxSize:k.maxSize,onExpand:()=>{let e=v;q(e),document.cookie=`react-resizable-panels:collapsed=${JSON.stringify(e)}`},onCollapse:()=>{q(!0),document.cookie=`react-resizable-panels:collapsed=${JSON.stringify(!0)}`},className:h(R&&"min-w-[50px] transition-all duration-300 ease-in-out"),children:[(0,Ps.jsx)("div",{className:h("flex py-1.5 max-h-14 items-center border-b border-border/40 justify-center",R&&"px-2"),children:(0,Ps.jsx)(J,{href:b.list?.toString()??"/",className:"inline-flex items-center justify-center",title:b.meta?.label??b.name,children:I})}),(0,Ps.jsx)(Nt,{isCollapsed:R})]}),(0,Ps.jsx)(ra,{withHandle:!0,className:"bg-border/40"}),(0,Ps.jsxs)(ea,{defaultSize:S[1],minSize:25,className:"xl:max-h-dvh h-full !overflow-y-auto flex flex-col overflow-x-hidden",children:[(0,Ps.jsxs)("header",{className:h("sticky top-0 z-50 py-2 h-14 px-4 flex justify-end items-center border-b border-border/40 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60",s?.rightSide&&"justify-between"),children:[s?.leftSide&&(0,Ps.jsx)("div",{className:"flex items-center justify-start flex-1",children:s?.leftSide}),s?.rightSide?(0,Ps.jsxs)("div",{className:"flex items-center justify-end flex-1",children:[(0,Ps.jsx)(ut,{}),s?.rightSide]}):(0,Ps.jsx)(ut,{})]}),(0,Ps.jsx)("main",{className:"grow px-6 py-4",children:e}),i&&(0,Ps.jsx)("footer",{className:"px-6 py-4 border-t border-border/40 sticky bottom-0 bg-background text-primary flex flex-row items-center",children:(0,Ps.jsx)("div",{className:"w-full",children:i})})]})]})})})}),"DefaultLayout");Ls.displayName="DefaultLayout";var As=require("sonner"),Ms={open:n((({key:e,message:r,description:a,type:t})=>{"success"===t&&As.toast.success(r,{description:a,id:e}),"error"===t&&As.toast.error(r,{description:a,id:e}),"progress"===t&&As.toast.loading(r,{description:a,id:e})}),"open"),close:n((e=>As.toast.dismiss(e)),"close")},Os=n((()=>Ms),"useNotificationProvider"),Es=require("@refinedev/core"),Vs=require("react"),_s=n(((e,r,a)=>{let t=(0,Vs.useContext)(Es.AccessControlContext),s=t.options.buttons.enableAccessControl,i=t.options.buttons.hideIfUnauthorized,{editUrl:l}=(0,Es.useNavigation)(),{id:o,resource:d}=(0,Es.useResource)(e),{data:c}=(0,Es.useCan)({resource:e,action:"edit",params:{id:r,resource:d},queryOptions:{enabled:s}}),u=(0,Es.useTranslate)(),m=n((()=>c?.can?"":c?.reason?c.reason:u("buttons.notAccessTitle","You don't have permission to access")),"reason"),x=e&&(r??o)?l(e,r??o,a):"";return{can:!(s&&i&&!c?.can),reason:m(),url:x}}),"useGetEditUrl"),Hs=require("@refinedev/core"),$s=require("react"),Us=n(((e,r,a)=>{let t=(0,$s.useContext)(Hs.AccessControlContext),s=t.options.buttons.enableAccessControl,i=t.options.buttons.hideIfUnauthorized,{showUrl:l}=(0,Hs.useNavigation)(),{id:o,resource:d}=(0,Hs.useResource)(e),{data:c}=(0,Hs.useCan)({resource:e,action:"show",params:{id:r,resource:d},queryOptions:{enabled:s}}),u=(0,Hs.useTranslate)(),m=n((()=>c?.can?"":c?.reason?c.reason:u("buttons.notAccessTitle","You don't have permission to access")),"reason"),x=e&&(r||o)?l(e,r??o,a):"";return{can:!(s&&i&&!c?.can),reason:m(),url:x}}),"useGetShowUrl"),Qs=require("@refinedev/core"),Gs=require("react"),Ws=n(((e,r,a)=>{let t=(0,Gs.useContext)(Qs.AccessControlContext),s=t.options.buttons.enableAccessControl,i=t.options.buttons.hideIfUnauthorized,l=(0,Qs.useTranslate)(),o=(0,Qs.useResourceParams)(),{resource:d,identifier:c}=(0,Qs.useResource)(e),{mutationMode:u}=(0,Qs.useMutationMode)(),{mutate:m,isLoading:x}=(0,Qs.useDelete)(),{data:f}=(0,Qs.useCan)({resource:d?.name,action:"delete",params:{id:r??o,resource:d},queryOptions:{enabled:s}}),p=n((()=>f?.can?"":f?.reason?f.reason:l("You don't have permission to access")),"reason"),{setWarnWhen:h}=(0,Qs.useWarnAboutChange)(),g=n((e=>{if((!s||!i||f?.can)&&(r??o)&&c)return h(!1),m({id:r??o??"",resource:c,mutationMode:u,meta:(0,Qs.pickNotDeprecated)(a),metaData:(0,Qs.pickNotDeprecated)(a)},e)}),"onDeleteMutate");return{can:!(s&&i&&!f?.can),reason:p(),mutate:g,isLoading:x}}),"useDeleteHelper"),Ks=require("@refinedev/core"),Xs=n((()=>{let e=(0,Ks.useRouterType)(),r=(0,Ks.useBack)(),{goBack:a}=(0,Ks.useNavigation)(),{action:t}=(0,Ks.useResource)();return"list"!==t||typeof t<"u"?"legacy"===e?a:r:void 0}),"useOnBack"),Js=require("@refinedev/core"),Ys=require("react"),Zs=require("react/jsx-runtime");function ei(e){let r=Xs(),{can:a,isLoading:t,mutate:s}=Ws(e.data?.resource,e.data?.row?.id),i=(0,Js.useTranslate)(),l=(0,Ys.useCallback)((()=>{if(a)return s({onSuccess(){let a=e?.data?.redirectBack??!1,t=e?.data?.onAfterHandle;e?.updateData({toogle:!1,row:void 0,resource:"",redirectBack:!1,onAfterHandle:void 0}),a&&r?.(),t&&t()}})}),[a,s,e,r]);return(0,Zs.jsx)(et,{open:a&&e?.data?.toogle,loading:t,title:i("Are you sure?"),description:i("This action cannot be undone."),okText:i("Delete"),cancelText:i("Cancel"),okButtonVariant:"destructive",onOpenChange:()=>{t||e?.updateData({toogle:!1,row:void 0,resource:""})},onConfirm:l})}n(ei,"DeleteActionModal");var ri=(0,Ys.createContext)(void 0),ai=n((({children:e})=>{let[r,a]=(0,Ys.useState)({row:void 0,resource:"",toogle:!1,onAfterHandle:void 0}),t=n((e=>{a(e)}),"updateData");return(0,Zs.jsxs)(ri.Provider,{value:{data:r,updateData:t},children:[e,(0,Zs.jsx)(ei,{data:r,updateData:t})]})}),"DeleteProvider"),ti=require("react"),si=require("react/jsx-runtime"),ii=(0,ti.forwardRef)((({className:e,...r},a)=>(0,si.jsxs)("svg",{ref:a,xmlns:"http://www.w3.org/2000/svg",className:h("mx-auto inline",e),viewBox:"0 0 120 30",fill:"currentColor",...r,children:[(0,si.jsxs)("circle",{cx:"15",cy:"15",r:"15",children:[(0,si.jsx)("animate",{attributeName:"r",begin:"0s",calcMode:"linear",dur:"0.8s",from:"15",repeatCount:"indefinite",to:"15",values:"15;9;15"}),(0,si.jsx)("animate",{attributeName:"fill-opacity",begin:"0s",calcMode:"linear",dur:"0.8s",from:"1",repeatCount:"indefinite",to:"1",values:"1;.5;1"})]}),(0,si.jsxs)("circle",{cx:"60",cy:"15",r:"9",fillOpacity:"0.3",children:[(0,si.jsx)("animate",{attributeName:"r",begin:"0s",calcMode:"linear",dur:"0.8s",from:"9",repeatCount:"indefinite",to:"9",values:"9;15;9"}),(0,si.jsx)("animate",{attributeName:"fill-opacity",begin:"0s",calcMode:"linear",dur:"0.8s",from:"0.5",repeatCount:"indefinite",to:"0.5",values:".5;1;.5"})]}),(0,si.jsxs)("circle",{cx:"105",cy:"15",r:"15",children:[(0,si.jsx)("animate",{attributeName:"r",begin:"0s",calcMode:"linear",dur:"0.8s",from:"15",repeatCount:"indefinite",to:"15",values:"15;9;15"}),(0,si.jsx)("animate",{attributeName:"fill-opacity",begin:"0s",calcMode:"linear",dur:"0.8s",from:"1",repeatCount:"indefinite",to:"1",values:"1;.5;1"})]})]}))),li=ii,ni=require("@refinedev/react-table"),oi=require("@tanstack/react-table"),di=require("react"),ci=require("@radix-ui/react-icons"),ui=require("react/jsx-runtime"),mi=n((e=>(0,ui.jsx)(pr,{disabled:e.disabled,asChild:!(!e.to||!e.to&&!e.children),onClick:e.onClick,children:e.asChild?e.children:e.to?(0,ui.jsxs)(J,{href:e.to,title:e.title,children:[e.icon?(0,ui.jsx)("span",{className:"mr-2",children:e.icon}):null,e.title]}):(0,ui.jsxs)(ui.Fragment,{children:[e.icon?(0,ui.jsx)("span",{className:"mr-2",children:e.icon}):null,e.title]})})),"RowAction");function xi({children:e}){return(0,ui.jsxs)(cr,{children:[(0,ui.jsx)(ur,{asChild:!0,children:(0,ui.jsxs)(w,{variant:"ghost",size:"icon",children:[(0,ui.jsx)(ci.DotsHorizontalIcon,{className:"h-4 w-4"}),(0,ui.jsx)("span",{className:"sr-only",children:"Open menu"})]})}),(0,ui.jsx)(fr,{align:"end",className:"w-[160px]",children:e})]})}mi.displayName="RowAction",n(xi,"RowActions");var fi=require("react/jsx-runtime");function pi({row:e,resource:r,title:a,disabled:t,...s}){let i=_s(r,e.id);return(0,fi.jsx)(mi,{...s,disabled:!i.can||t,title:i?.can?a:i?.reason,to:i.url})}n(pi,"EditAction"),pi.displayName="EditAction";var hi=require("react/jsx-runtime");function gi({row:e,resource:r,title:a,disabled:t,...s}){let i=Us(r,e.id);return(0,hi.jsx)(mi,{...s,disabled:!i.can||t,title:i?.can?a:i?.reason,to:i.url})}n(gi,"ShowAction"),gi.displayName="ShowAction";var ji=require("date-fns"),bi=require("lucide-react"),vi=require("react"),Ni=require("react/jsx-runtime");function yi({column:e,title:r,numberOfMonths:a=2,align:t="start"}){let[s,i]=(0,vi.useState)({from:void 0,to:void 0}),l=new Set(e?.getFilterValue());return(0,vi.useEffect)((()=>{if(s){let r=Object.values(s).filter(Boolean);r.length&&e?.setFilterValue(r.map((e=>e?(0,ji.format)(e,"yyyy-MM-dd").toString():"")))}}),[e,s]),(0,Ni.jsxs)(Gr,{children:[(0,Ni.jsx)(Wr,{asChild:!0,children:(0,Ni.jsxs)("div",{className:"inline-flex flex-row items-center gap-x-0.5",children:[(0,Ni.jsxs)(w,{title:r,variant:"outline",size:"sm",className:"h-5 border-dashed px-1 py-2.5",children:[(0,Ni.jsx)(bi.FilterIcon,{className:h("h-3.5 w-3.5")}),s?.from?(0,Ni.jsxs)(Ni.Fragment,{children:[(0,Ni.jsx)(wa,{orientation:"vertical",className:"mx-2 h-4"}),(0,Ni.jsx)(be,{variant:"secondary",className:"rounded-sm p-1 h-3.5 text-xs font-normal",children:s.to?(0,Ni.jsx)(Ni.Fragment,{children:[(0,ji.format)(s.from,"LLL dd, y"),(0,ji.format)(s.to,"LLL dd, y")].join(" ")}):(0,ji.format)(s.from,"LLL dd, y")})]}):null]}),l.size>0&&(0,Ni.jsx)(w,{variant:"outline",size:"sm",className:"h-5 border-dashed px-1 py-2.5",onClick:r=>{r.preventDefault(),e?.setFilterValue(void 0),i({from:void 0,to:void 0})},children:(0,Ni.jsx)(bi.FilterX,{className:h("h-3.5 w-3.5")})})]})}),(0,Ni.jsxs)(Kr,{className:"w-auto p-0",align:t,children:[(0,Ni.jsx)(we,{initialFocus:!0,mode:"range",defaultMonth:new Date,selected:s,onSelect:i,numberOfMonths:a}),l.size>0&&(0,Ni.jsxs)(Ni.Fragment,{children:[(0,Ni.jsx)(wa,{}),(0,Ni.jsx)("div",{className:"flex flex-row items-center justify-center py-3",children:(0,Ni.jsxs)(w,{variant:"outline",size:"sm",className:"h-8 border-dashed px-2",onClick:()=>{e?.setFilterValue(void 0),i({from:void 0,to:void 0})},children:[(0,Ni.jsx)(bi.FilterX,{size:16,className:"mr-2"}),"Clear"]})})]})]})]})}n(yi,"TableFilterDateRangePickerFilter");var wi=require("@radix-ui/react-icons"),Ci=require("lucide-react"),qi=require("react/jsx-runtime");function Si({column:e,title:r,options:a,align:t="start"}){let s=e?.getFacetedUniqueValues(),i=new Set(e?.getFilterValue());return(0,qi.jsxs)(Gr,{children:[(0,qi.jsx)(Wr,{asChild:!0,children:(0,qi.jsxs)("div",{className:"inline-flex flex-row items-center gap-x-0.5",children:[(0,qi.jsxs)(w,{title:r,variant:"outline",size:"sm",className:"h-5 border-dashed px-1 py-2.5",children:[(0,qi.jsx)(Ci.FilterIcon,{className:h("h-3.5 w-3.5")}),i?.size>0&&(0,qi.jsxs)(qi.Fragment,{children:[(0,qi.jsx)(wa,{orientation:"vertical",className:"mx-2 h-4"}),(0,qi.jsx)(be,{variant:"secondary",className:"rounded-sm p-1 h-3.5 text-xs font-normal lg:hidden",children:i.size}),(0,qi.jsx)("div",{className:"hidden space-x-1 lg:flex",children:i.size>2?(0,qi.jsxs)(be,{variant:"secondary",className:"rounded-sm p-1 text-xs h-3.5 font-normal",children:[i.size," selected"]}):a?.filter((e=>i.has(e.value))).map((e=>(0,qi.jsx)(be,{variant:"secondary",className:"rounded-sm p-1 text-xs h-3.5 font-normal",children:e.label},e.value)))})]})]}),i.size>0&&(0,qi.jsx)(w,{variant:"outline",size:"sm",className:"h-5 border-dashed px-1 py-2.5",onClick:r=>{r.preventDefault(),e?.setFilterValue(void 0)},children:(0,qi.jsx)(Ci.FilterX,{className:h("h-3.5 w-3.5")})})]})}),(0,qi.jsx)(Kr,{className:"w-[200px] p-0",align:t,children:(0,qi.jsxs)(Ye,{children:[(0,qi.jsx)(Ze,{placeholder:r}),(0,qi.jsxs)(er,{children:[(0,qi.jsx)(rr,{children:"No results found."}),(0,qi.jsx)(ar,{children:a?.map((r=>{let a=i.has(r.value);return(0,qi.jsxs)(sr,{onSelect:()=>{a?i.delete(r.value):i.add(r.value);let t=Array.from(i);e?.setFilterValue(t.length?t:void 0)},children:[(0,qi.jsx)("div",{className:h("mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary",a?"bg-primary text-primary-foreground":"opacity-50 [&_svg]:invisible"),children:(0,qi.jsx)(wi.CheckIcon,{className:h("h-4 w-4")})}),r.icon&&(0,qi.jsx)(r.icon,{className:"mr-2 h-4 w-4 text-muted-foreground"}),(0,qi.jsx)("span",{children:r.label}),s?.get(r.value)&&(0,qi.jsx)("span",{className:"ml-auto flex h-4 w-4 items-center justify-center font-mono text-xs",children:s.get(r.value)})]},r.value)}))}),i.size>0&&(0,qi.jsxs)(qi.Fragment,{children:[(0,qi.jsx)(tr,{}),(0,qi.jsx)(ar,{children:(0,qi.jsx)(sr,{onSelect:()=>e?.setFilterValue(void 0),className:"justify-center text-center",children:"Clear filters"})})]})]})]})})]})}n(Si,"TableFilterDropdown");var ki=require("lucide-react"),Ri=require("react/jsx-runtime");function Ii({column:e,title:r,align:a="start"}){let t=e?.getFilterValue();return(0,Ri.jsxs)(Gr,{children:[(0,Ri.jsx)(Wr,{asChild:!0,children:(0,Ri.jsx)("div",{className:"inline-flex flex-row items-center gap-x-0.5",children:t?(0,Ri.jsx)(w,{variant:"outline",size:"sm",className:"h-5 border-dashed px-1 py-2.5",onClick:r=>{r.preventDefault(),e?.setFilterValue(void 0)},children:(0,Ri.jsx)(ki.FilterX,{className:h("h-3.5 w-3.5")})}):(0,Ri.jsx)(w,{title:r,variant:"outline",size:"sm",className:"h-4 border-dashed px-1 py-2.5",children:(0,Ri.jsx)(ki.FilterIcon,{className:h("h-3.5 w-3.5")})})})}),(0,Ri.jsx)(Kr,{className:"w-[200px] p-0 overflow-hidden border-0 ring-0",align:a,children:(0,Ri.jsxs)("div",{className:"relative",children:[(0,Ri.jsxs)("div",{className:"flex flex-row items-center px-3 text-popover-foreground bg-popover",children:[(0,Ri.jsx)("svg",{width:"15",height:"15",viewBox:"0 0 15 15",fill:"none",xmlns:"http://www.w3.org/2000/svg",className:"mr-2 h-4 w-4 shrink-0 opacity-50",children:(0,Ri.jsx)("path",{d:"M10 6.5C10 8.433 8.433 10 6.5 10C4.567 10 3 8.433 3 6.5C3 4.567 4.567 3 6.5 3C8.433 3 10 4.567 10 6.5ZM9.30884 10.0159C8.53901 10.6318 7.56251 11 6.5 11C4.01472 11 2 8.98528 2 6.5C2 4.01472 4.01472 2 6.5 2C8.98528 2 11 4.01472 11 6.5C11 7.56251 10.6318 8.53901 10.0159 9.30884L12.8536 12.1464C13.0488 12.3417 13.0488 12.6583 12.8536 12.8536C12.6583 13.0488 12.3417 13.0488 12.1464 12.8536L9.30884 10.0159Z",fill:"currentColor",fillRule:"evenodd",clipRule:"evenodd"})}),(0,Ri.jsx)(Hr,{defaultValue:t??"",onChange:r=>{e?.setFilterValue(r.target.value)},className:h("h-10 border-0 focus-visible:ring-0 ring-0 rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground shadow-none disabled:cursor-not-allowed disabled:opacity-50"),placeholder:r})]}),t&&(0,Ri.jsxs)(Ri.Fragment,{children:[(0,Ri.jsx)(wa,{}),(0,Ri.jsx)("div",{className:"flex flex-row items-center justify-center py-3",children:(0,Ri.jsxs)(w,{variant:"outline",size:"sm",className:"h-8 border-dashed px-2",onClick:()=>{e?.setFilterValue(void 0)},children:[(0,Ri.jsx)(ki.FilterX,{size:16,className:"mr-2"}),"Clear"]})})]})]})})]})}n(Ii,"TableFilterSearchColumn");var zi=require("@radix-ui/react-icons"),Di=require("react"),Ti=require("react/jsx-runtime"),Bi=(0,Di.forwardRef)((({table:e,children:r,options:a},t)=>(0,Ti.jsxs)(Ti.Fragment,{children:[(0,Ti.jsx)(Le,{ref:t,checked:e.getIsSomeRowsSelected()?"indeterminate":e.getIsAllPageRowsSelected(),onCheckedChange:r=>e.toggleAllPageRowsSelected(!!r),className:"translate-y-[2px]","aria-label":"Select all"}),r||Array.isArray(a)&&a.length&&(0,Ti.jsxs)(cr,{children:[(0,Ti.jsx)(ur,{asChild:!0,children:(0,Ti.jsx)(w,{disabled:!(e.getIsSomeRowsSelected()||e.getIsAllPageRowsSelected()),size:"icon",variant:"ghost",className:"px-0 w-5",children:(0,Ti.jsx)(zi.DotsVerticalIcon,{className:"w-4 h-4"})})}),(0,Ti.jsxs)(fr,{align:"start",children:[(0,Ti.jsx)(jr,{children:"Bulk Actions"}),(0,Ti.jsx)(br,{}),!r&&Array.isArray(a)&&a?.length>0?a.map(((e,r)=>(0,Ti.jsx)(pr,{onSelect:e.onClick,children:e.label},r))):r]})]})]})));Bi.displayName="CheckAll";var Fi=require("@radix-ui/react-icons"),Pi=require("react/jsx-runtime"),Li=n((({table:e})=>(0,Pi.jsxs)("div",{className:"flex flex-col sm:flex-row gap-y-4 sm-gap-y-0 items-center justify-between",children:[(0,Pi.jsxs)("div",{className:"flex-1 text-sm text-muted-foreground",children:[e.getFilteredSelectedRowModel().rows.length," of"," ",e.getFilteredRowModel().rows.length," row(s) selected."]}),(0,Pi.jsxs)("div",{className:"flex relative flex-col-reverse gap-y-4 sm:gap-y-0 sm:flex-row items-center space-x-6 lg:space-x-8",children:[(0,Pi.jsxs)("div",{className:"flex items-center space-x-2",children:[(0,Pi.jsx)("p",{className:"text-sm font-medium",children:"Rows per page"}),(0,Pi.jsxs)(ua,{value:`${e.getState().pagination.pageSize}`,onValueChange:r=>{e.setPageSize(Number(r))},children:[(0,Pi.jsx)(xa,{className:"h-8 w-[70px]",children:(0,Pi.jsx)(ma,{placeholder:e.getState().pagination.pageSize})}),(0,Pi.jsx)(ha,{children:[10,20,30,40,50].map((e=>(0,Pi.jsx)(ja,{value:`${e}`,children:e},e)))})]})]}),(0,Pi.jsxs)("div",{className:"flex w-fit items-center justify-center text-sm font-medium",children:["Page ",e.getState().pagination.pageIndex+1," of"," ",e.getPageCount()]}),(0,Pi.jsxs)("div",{className:"flex items-center space-x-2",children:[(0,Pi.jsxs)(w,{variant:"outline",className:"hidden h-8 w-8 p-0 lg:flex",onClick:()=>e.setPageIndex(0),disabled:!e.getCanPreviousPage(),children:[(0,Pi.jsx)("span",{className:"sr-only",children:"Go to first page"}),(0,Pi.jsx)(Fi.DoubleArrowLeftIcon,{className:"h-4 w-4"})]}),(0,Pi.jsxs)(w,{variant:"outline",className:"h-8 w-8 p-0",onClick:()=>e.previousPage(),disabled:!e.getCanPreviousPage(),children:[(0,Pi.jsx)("span",{className:"sr-only",children:"Go to previous page"}),(0,Pi.jsx)(Fi.ChevronLeftIcon,{className:"h-4 w-4"})]}),(0,Pi.jsxs)(w,{variant:"outline",className:"h-8 w-8 p-0",onClick:()=>e.nextPage(),disabled:!e.getCanNextPage(),children:[(0,Pi.jsx)("span",{className:"sr-only",children:"Go to next page"}),(0,Pi.jsx)(Fi.ChevronRightIcon,{className:"h-4 w-4"})]}),(0,Pi.jsxs)(w,{variant:"outline",className:"hidden h-8 w-8 p-0 lg:flex",onClick:()=>e.setPageIndex(e.getPageCount()-1),disabled:!e.getCanNextPage(),children:[(0,Pi.jsx)("span",{className:"sr-only",children:"Go to last page"}),(0,Pi.jsx)(Fi.DoubleArrowRightIcon,{className:"h-4 w-4"})]})]})]})]})),"Pagination");Li.displayName="Pagination";var Ai=require("@radix-ui/react-icons"),Mi=require("react/jsx-runtime"),Oi=n((({column:e})=>(0,Mi.jsx)("div",{className:"cursor-pointer",onClick:()=>{e?.toggleSorting("asc"===e?.getIsSorted())},children:(0,Mi.jsxs)("div",{className:"inline-flex flex-col",children:[(0,Mi.jsx)(Ai.CaretUpIcon,{className:h("-mb-1.5 w-5 h-5","asc"===e?.getIsSorted()?"text-foreground":"text-input")}),(0,Mi.jsx)(Ai.CaretDownIcon,{className:h("-mt-1.5 w-5 h-5","desc"===e?.getIsSorted()?"text-foreground":"text-input")})]})})),"SortAction"),Ei=require("@radix-ui/react-dropdown-menu"),Vi=require("@radix-ui/react-icons"),_i=require("react"),Hi=require("react/jsx-runtime"),$i=n((({table:e})=>{let r=(0,_i.useMemo)((()=>e.getAllColumns().filter((e=>typeof e.accessorFn<"u"&&e.getCanHide()))),[e]);return(0,Hi.jsxs)(cr,{children:[(0,Hi.jsx)(Ei.DropdownMenuTrigger,{asChild:!0,children:(0,Hi.jsxs)(w,{variant:"outline",size:"sm",className:"ml-auto hidden h-8 lg:flex",children:[(0,Hi.jsx)(Vi.MixerHorizontalIcon,{className:"mr-2 h-4 w-4"}),"View"]})}),(0,Hi.jsxs)(fr,{align:"end",className:"w-[150px]",children:[(0,Hi.jsx)(jr,{children:"Toggle columns"}),(0,Hi.jsx)(br,{}),r.map((e=>(0,Hi.jsx)(hr,{className:"capitalize",checked:e.getIsVisible(),onCheckedChange:r=>e.toggleVisibility(r),children:e.id},e.id)))]})]})}),"DataTableViewOptions");$i.displayName="DataTableViewOptions";var Ui=require("react/jsx-runtime");function Qi({table:e}){return(0,Ui.jsxs)("div",{className:"flex items-center justify-between",children:[(0,Ui.jsx)("div",{className:"flex flex-1 items-center space-x-2"}),(0,Ui.jsx)($i,{table:e})]})}n(Qi,"DataTableToolbar");var Gi=require("react"),Wi=require("react/jsx-runtime");function Ki({row:e,resource:r,title:a,disabled:t,onAfterHandle:s,...i}){let{can:l,reason:n}=Ws(r,e.id),o=(0,Gi.useContext)(ri);return(0,Wi.jsx)(mi,{...i,disabled:!l||t,title:l?a:n,onClick:()=>o?.updateData({row:e,resource:r,toogle:!0,onAfterHandle:s})})}n(Ki,"DeleteAction"),Ki.displayName="DeleteAction";var Xi=require("react/jsx-runtime");function Ji({children:e,showHeader:r=!0,columns:a=[],...t}){let s=(0,di.useCallback)((({id:e,accessorKey:r,header:a,enableSorting:t,enableHiding:s,filter:i,cell:l})=>{let n={id:e,header:a,accessorKey:r,enableSorting:t??!1,enableHiding:s??!1,enableColumnFilter:!0,enableResizing:!0,filter:i};return l&&(n.cell=l),n}),[]);a=(0,di.useMemo)((()=>Array.isArray(e)?e.map((e=>e.props)).map(s):[]),[e,s]);let i=(0,ni.useTable)({columns:a,...t}),l=(0,di.useMemo)((()=>i.options),[i]),n=(0,di.useMemo)((()=>!(!l.enableColumnFilters&&!l?.enableFilters)),[l]);return(0,Xi.jsx)(ai,{children:(0,Xi.jsxs)("div",{className:"space-y-4",children:[(0,Xi.jsx)(Qi,{table:i}),(0,Xi.jsx)("div",{className:"rounded-md border border-border",children:(0,Xi.jsxs)(za,{children:[r&&(0,Xi.jsx)(Da,{children:i.getHeaderGroups().map((e=>(0,Xi.jsx)(Fa,{children:e.headers.map((e=>{let r=e.column.columnDef;return(0,Xi.jsx)(Pa,{children:(0,Xi.jsxs)("div",{className:"inline-flex flex-row items-center gap-x-2.5",children:[e.isPlaceholder?null:(0,oi.flexRender)(e.column.columnDef.header,e.getContext()),l.enableSorting&&r.enableSorting&&(0,Xi.jsx)(Oi,{column:e.column}),n&&r?.filter&&r.filter({column:e.column,title:`${r.header} Filter`})]})},e.id)}))},e.id)))}),(0,Xi.jsx)(Ta,{children:i.refineCore.tableQuery.isLoading?(0,Xi.jsx)(Fa,{children:(0,Xi.jsx)(La,{colSpan:a.length,className:"h-24 text-center text-nowrap",children:(0,Xi.jsx)("div",{className:"flex items-center justify-center flex-row",children:(0,Xi.jsx)(li,{className:"h-4 text-primary"})})})}):i.getRowModel().rows?.length?i.getRowModel().rows.map((e=>(0,Xi.jsx)(Fa,{"data-state":e.getIsSelected()&&"selected",children:e.getVisibleCells().map((e=>(0,Xi.jsx)(La,{className:"text-nowrap",children:(0,oi.flexRender)(e.column.columnDef.cell,e.getContext())},e.id)))},e.id))):(0,Xi.jsx)(Fa,{children:(0,Xi.jsx)(La,{colSpan:a.length,className:"h-24 text-center",children:"No results."})})})]})}),(0,Xi.jsx)(Li,{table:i})]})})}n(Ji,"Table");var Yi=n((e=>e.children),"TableColumn");Ji.Column=Yi,Ji.CheckAll=Bi,Ji.Actions=xi,Ji.Action=mi,Ji.EditAction=pi,Ji.ShowAction=gi,Ji.DeleteAction=Ki,Ji.Filter={DateRangePicker:yi,Dropdown:Si,Search:Ii},Ji.displayName="Table";//# sourceMappingURL=data:application/json;base64,